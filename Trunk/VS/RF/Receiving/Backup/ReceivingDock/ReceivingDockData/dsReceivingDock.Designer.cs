//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.CompactFramework.Design.Data, Version 2.0.50727.3603.
// 
namespace ReceivingDockData {
    using System;
    using System.Data;
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsReceivingDock")]
    public partial class dsReceivingDock : global::System.Data.DataSet {
        
        private PODetailsDataTable tablePODetails;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsReceivingDock() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PODetailsDataTable PODetails {
            get {
                return this.tablePODetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsReceivingDock cln = ((dsReceivingDock)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["PODetails"] != null)) {
                    base.Tables.Add(new PODetailsDataTable(ds.Tables["PODetails"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablePODetails = ((PODetailsDataTable)(base.Tables["PODetails"]));
            if ((initTable == true)) {
                if ((this.tablePODetails != null)) {
                    this.tablePODetails.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsReceivingDock";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsReceivingDock.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablePODetails = new PODetailsDataTable();
            base.Tables.Add(this.tablePODetails);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePODetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsReceivingDock ds = new dsReceivingDock();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void PODetailsRowChangeEventHandler(object sender, PODetailsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PODetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnPONumber;
            
            private global::System.Data.DataColumn columnVendorCode;
            
            private global::System.Data.DataColumn columnPartNumber;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnUnit;
            
            private global::System.Data.DataColumn columnDueDT;
            
            private global::System.Data.DataColumn columnBalance;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnRowID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PODetailsDataTable() {
                this.TableName = "PODetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PODetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PONumberColumn {
                get {
                    return this.columnPONumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VendorCodeColumn {
                get {
                    return this.columnVendorCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PartNumberColumn {
                get {
                    return this.columnPartNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitColumn {
                get {
                    return this.columnUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DueDTColumn {
                get {
                    return this.columnDueDT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BalanceColumn {
                get {
                    return this.columnBalance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RowIDColumn {
                get {
                    return this.columnRowID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PODetailsRow this[int index] {
                get {
                    return ((PODetailsRow)(this.Rows[index]));
                }
            }
            
            public event PODetailsRowChangeEventHandler PODetailsRowChanging;
            
            public event PODetailsRowChangeEventHandler PODetailsRowChanged;
            
            public event PODetailsRowChangeEventHandler PODetailsRowDeleting;
            
            public event PODetailsRowChangeEventHandler PODetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPODetailsRow(PODetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PODetailsRow AddPODetailsRow(int PONumber, string VendorCode, string PartNumber, string Description, string Unit, System.DateTime DueDT, decimal Balance, string Type, decimal RowID) {
                PODetailsRow rowPODetailsRow = ((PODetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PONumber,
                        VendorCode,
                        PartNumber,
                        Description,
                        Unit,
                        DueDT,
                        Balance,
                        Type,
                        RowID};
                rowPODetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPODetailsRow);
                return rowPODetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PODetailsRow FindByPONumberPartNumberDueDTRowID(int PONumber, string PartNumber, System.DateTime DueDT, decimal RowID) {
                return ((PODetailsRow)(this.Rows.Find(new object[] {
                            PONumber,
                            PartNumber,
                            DueDT,
                            RowID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PODetailsDataTable cln = ((PODetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PODetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPONumber = base.Columns["PONumber"];
                this.columnVendorCode = base.Columns["VendorCode"];
                this.columnPartNumber = base.Columns["PartNumber"];
                this.columnDescription = base.Columns["Description"];
                this.columnUnit = base.Columns["Unit"];
                this.columnDueDT = base.Columns["DueDT"];
                this.columnBalance = base.Columns["Balance"];
                this.columnType = base.Columns["Type"];
                this.columnRowID = base.Columns["RowID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPONumber = new global::System.Data.DataColumn("PONumber", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPONumber);
                this.columnVendorCode = new global::System.Data.DataColumn("VendorCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVendorCode);
                this.columnPartNumber = new global::System.Data.DataColumn("PartNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPartNumber);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnUnit = new global::System.Data.DataColumn("Unit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnit);
                this.columnDueDT = new global::System.Data.DataColumn("DueDT", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDueDT);
                this.columnBalance = new global::System.Data.DataColumn("Balance", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBalance);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnRowID = new global::System.Data.DataColumn("RowID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPONumber,
                                this.columnPartNumber,
                                this.columnDueDT,
                                this.columnRowID}, true));
                this.columnPONumber.AllowDBNull = false;
                this.columnVendorCode.AllowDBNull = false;
                this.columnVendorCode.MaxLength = 10;
                this.columnPartNumber.AllowDBNull = false;
                this.columnPartNumber.MaxLength = 25;
                this.columnDescription.MaxLength = 100;
                this.columnUnit.MaxLength = 2;
                this.columnDueDT.AllowDBNull = false;
                this.columnType.MaxLength = 1;
                this.columnRowID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PODetailsRow NewPODetailsRow() {
                return ((PODetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PODetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PODetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PODetailsRowChanged != null)) {
                    this.PODetailsRowChanged(this, new PODetailsRowChangeEvent(((PODetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PODetailsRowChanging != null)) {
                    this.PODetailsRowChanging(this, new PODetailsRowChangeEvent(((PODetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PODetailsRowDeleted != null)) {
                    this.PODetailsRowDeleted(this, new PODetailsRowChangeEvent(((PODetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PODetailsRowDeleting != null)) {
                    this.PODetailsRowDeleting(this, new PODetailsRowChangeEvent(((PODetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePODetailsRow(PODetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsReceivingDock ds = new dsReceivingDock();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PODetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class PODetailsRow : global::System.Data.DataRow {
            
            private PODetailsDataTable tablePODetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PODetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePODetails = ((PODetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PONumber {
                get {
                    return ((int)(this[this.tablePODetails.PONumberColumn]));
                }
                set {
                    this[this.tablePODetails.PONumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VendorCode {
                get {
                    return ((string)(this[this.tablePODetails.VendorCodeColumn]));
                }
                set {
                    this[this.tablePODetails.VendorCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PartNumber {
                get {
                    return ((string)(this[this.tablePODetails.PartNumberColumn]));
                }
                set {
                    this[this.tablePODetails.PartNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tablePODetails.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'PODetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePODetails.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Unit {
                get {
                    try {
                        return ((string)(this[this.tablePODetails.UnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Unit\' in table \'PODetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePODetails.UnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DueDT {
                get {
                    return ((global::System.DateTime)(this[this.tablePODetails.DueDTColumn]));
                }
                set {
                    this[this.tablePODetails.DueDTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Balance {
                get {
                    try {
                        return ((decimal)(this[this.tablePODetails.BalanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Balance\' in table \'PODetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePODetails.BalanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tablePODetails.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'PODetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePODetails.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RowID {
                get {
                    return ((decimal)(this[this.tablePODetails.RowIDColumn]));
                }
                set {
                    this[this.tablePODetails.RowIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tablePODetails.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tablePODetails.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitNull() {
                return this.IsNull(this.tablePODetails.UnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitNull() {
                this[this.tablePODetails.UnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBalanceNull() {
                return this.IsNull(this.tablePODetails.BalanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBalanceNull() {
                this[this.tablePODetails.BalanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tablePODetails.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tablePODetails.TypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class PODetailsRowChangeEvent : global::System.EventArgs {
            
            private PODetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PODetailsRowChangeEvent(PODetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PODetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace ReceivingDockData.dsReceivingDockTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class PODetailsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PODetailsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PODetails";
            tableMapping.ColumnMappings.Add("PONumber", "PONumber");
            tableMapping.ColumnMappings.Add("VendorCode", "VendorCode");
            tableMapping.ColumnMappings.Add("PartNumber", "PartNumber");
            tableMapping.ColumnMappings.Add("Description", "Description");
            tableMapping.ColumnMappings.Add("Unit", "Unit");
            tableMapping.ColumnMappings.Add("DueDT", "DueDT");
            tableMapping.ColumnMappings.Add("Balance", "Balance");
            tableMapping.ColumnMappings.Add("Type", "Type");
            tableMapping.ColumnMappings.Add("RowID", "RowID");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=192.168.2.3;Initial Catalog=EEH;User ID=sa;";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[6];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"select	PONumber = po_number,
	VendorCode = vendor_code,
	PartNumber = part_number,
	Description = description,
	Unit = unit_of_measure,
	DueDT = date_due,
	Balance = balance,
	Type = type,
	RowID = row_id
from	po_detail
where	date_due between dateadd (dd, -7, (getdate() - datepart (dw, getdate()) + 1)) and dateadd(dd, 7, (getdate() + (7 - datepart (dw, getdate())))) and
	balance > 0
";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "FT.ftsp_RFReceiving_CheckPONumber";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.StoredProcedure;
            global::System.Data.SqlClient.SqlParameter param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@RETURN_VALUE";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.Direction = global::System.Data.ParameterDirection.ReturnValue;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[1].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@PONumber";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[1].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Result";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.Direction = global::System.Data.ParameterDirection.InputOutput;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[1].Parameters.Add(param);
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "FT.ftsp_RFReceiving_CheckPONumberPart";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.StoredProcedure;
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@RETURN_VALUE";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.Direction = global::System.Data.ParameterDirection.ReturnValue;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[2].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@PONumber";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[2].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@PartNumber";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.Size = 25;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[2].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Result";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.Direction = global::System.Data.ParameterDirection.InputOutput;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[2].Parameters.Add(param);
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "FT.ftsp_RFReceiving_CheckPOQuantity";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.StoredProcedure;
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@RETURN_VALUE";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.Direction = global::System.Data.ParameterDirection.ReturnValue;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[3].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@PONumber";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[3].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@PartNumber";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.Size = 25;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[3].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Quantity";
            param.DbType = global::System.Data.DbType.Decimal;
            param.Size = 13;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[3].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Objects";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[3].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@NextDueAmount";
            param.DbType = global::System.Data.DbType.Decimal;
            param.Size = 13;
            param.Direction = global::System.Data.ParameterDirection.InputOutput;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[3].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@NextDueDate";
            param.DbType = global::System.Data.DbType.DateTime;
            param.Size = 8;
            param.Direction = global::System.Data.ParameterDirection.InputOutput;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[3].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Result";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.Direction = global::System.Data.ParameterDirection.InputOutput;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[3].Parameters.Add(param);
            this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "FT.ftsp_RFReceiving_ReceiveItem";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.StoredProcedure;
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@RETURN_VALUE";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.Direction = global::System.Data.ParameterDirection.ReturnValue;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[4].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@PONumber";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[4].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@PartNumber";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.Size = 25;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[4].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Operator";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.Size = 5;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[4].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Quantity";
            param.DbType = global::System.Data.DbType.Decimal;
            param.Size = 13;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[4].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Objects";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[4].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Shipper";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.Size = 20;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[4].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LotNumber";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.Size = 20;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[4].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@PrintServer";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.Size = 10;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[4].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SerialNumber";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.Direction = global::System.Data.ParameterDirection.InputOutput;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[4].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Result";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.Direction = global::System.Data.ParameterDirection.InputOutput;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[4].Parameters.Add(param);
            this._commandCollection[5] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "FT.ftsp_RFReceiving_ValidatePOPartQty";
            this._commandCollection[5].CommandType = global::System.Data.CommandType.StoredProcedure;
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@RETURN_VALUE";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.Direction = global::System.Data.ParameterDirection.ReturnValue;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[5].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@PONumber";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[5].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@PartNumber";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.Size = 25;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[5].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Quantity";
            param.DbType = global::System.Data.DbType.Decimal;
            param.Size = 13;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[5].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Objects";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[5].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@NextDueAmount";
            param.DbType = global::System.Data.DbType.Decimal;
            param.Size = 13;
            param.Direction = global::System.Data.ParameterDirection.InputOutput;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[5].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@NextDueDate";
            param.DbType = global::System.Data.DbType.DateTime;
            param.Size = 8;
            param.Direction = global::System.Data.ParameterDirection.InputOutput;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[5].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Result";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.Direction = global::System.Data.ParameterDirection.InputOutput;
            param.IsNullable = true;
            param.SourceColumn = null;
            this._commandCollection[5].Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillCurrentPurchasingRequirements(dsReceivingDock.PODetailsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsReceivingDock.PODetailsDataTable GetCurrentPurchasingRequirements() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            dsReceivingDock.PODetailsDataTable dataTable = new dsReceivingDock.PODetailsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Nullable<int> CheckPONumber(global::System.Nullable<int> PONumber, ref global::System.Nullable<int> Result) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((PONumber.HasValue == true)) {
                command.Parameters[1].Value = ((int)(PONumber.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Result.HasValue == true)) {
                command.Parameters[2].Value = ((int)(Result.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((command.Parameters[2].Value == null) 
                        || (command.Parameters[2].Value.GetType() == typeof(global::System.DBNull)))) {
                Result = new global::System.Nullable<int>();
            }
            else {
                Result = new global::System.Nullable<int>(((int)(command.Parameters[2].Value)));
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return new global::System.Nullable<int>();
            }
            else {
                return new global::System.Nullable<int>(((int)(returnValue)));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Nullable<int> CheckPONumberPart(global::System.Nullable<int> PONumber, string PartNumber, ref global::System.Nullable<int> Result) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((PONumber.HasValue == true)) {
                command.Parameters[1].Value = ((int)(PONumber.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((PartNumber == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(PartNumber));
            }
            if ((Result.HasValue == true)) {
                command.Parameters[3].Value = ((int)(Result.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((command.Parameters[3].Value == null) 
                        || (command.Parameters[3].Value.GetType() == typeof(global::System.DBNull)))) {
                Result = new global::System.Nullable<int>();
            }
            else {
                Result = new global::System.Nullable<int>(((int)(command.Parameters[3].Value)));
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return new global::System.Nullable<int>();
            }
            else {
                return new global::System.Nullable<int>(((int)(returnValue)));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Nullable<int> CheckPOQuantity(global::System.Nullable<int> PONumber, string PartNumber, global::System.Nullable<decimal> Quantity, global::System.Nullable<int> Objects, ref global::System.Nullable<decimal> NextDueAmount, ref global::System.Nullable<global::System.DateTime> NextDueDate, ref global::System.Nullable<int> Result) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[3];
            if ((PONumber.HasValue == true)) {
                command.Parameters[1].Value = ((int)(PONumber.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((PartNumber == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(PartNumber));
            }
            if ((Quantity.HasValue == true)) {
                command.Parameters[3].Value = ((decimal)(Quantity.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Objects.HasValue == true)) {
                command.Parameters[4].Value = ((int)(Objects.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((NextDueAmount.HasValue == true)) {
                command.Parameters[5].Value = ((decimal)(NextDueAmount.Value));
            }
            else {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((NextDueDate.HasValue == true)) {
                command.Parameters[6].Value = ((System.DateTime)(NextDueDate.Value));
            }
            else {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Result.HasValue == true)) {
                command.Parameters[7].Value = ((int)(Result.Value));
            }
            else {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((command.Parameters[5].Value == null) 
                        || (command.Parameters[5].Value.GetType() == typeof(global::System.DBNull)))) {
                NextDueAmount = new global::System.Nullable<decimal>();
            }
            else {
                NextDueAmount = new global::System.Nullable<decimal>(((decimal)(command.Parameters[5].Value)));
            }
            if (((command.Parameters[6].Value == null) 
                        || (command.Parameters[6].Value.GetType() == typeof(global::System.DBNull)))) {
                NextDueDate = new global::System.Nullable<global::System.DateTime>();
            }
            else {
                NextDueDate = new global::System.Nullable<global::System.DateTime>(((global::System.DateTime)(command.Parameters[6].Value)));
            }
            if (((command.Parameters[7].Value == null) 
                        || (command.Parameters[7].Value.GetType() == typeof(global::System.DBNull)))) {
                Result = new global::System.Nullable<int>();
            }
            else {
                Result = new global::System.Nullable<int>(((int)(command.Parameters[7].Value)));
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return new global::System.Nullable<int>();
            }
            else {
                return new global::System.Nullable<int>(((int)(returnValue)));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual object ReceiveItem(global::System.Nullable<int> PONumber, string PartNumber, string Operator, global::System.Nullable<decimal> Quantity, global::System.Nullable<int> Objects, string Shipper, string LotNumber, string PrintServer, ref global::System.Nullable<int> SerialNumber, ref global::System.Nullable<int> Result) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[4];
            if ((PONumber.HasValue == true)) {
                command.Parameters[1].Value = ((int)(PONumber.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((PartNumber == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(PartNumber));
            }
            if ((Operator == null)) {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(Operator));
            }
            if ((Quantity.HasValue == true)) {
                command.Parameters[4].Value = ((decimal)(Quantity.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Objects.HasValue == true)) {
                command.Parameters[5].Value = ((int)(Objects.Value));
            }
            else {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Shipper == null)) {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(Shipper));
            }
            if ((LotNumber == null)) {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[7].Value = ((string)(LotNumber));
            }
            if ((PrintServer == null)) {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[8].Value = ((string)(PrintServer));
            }
            if ((SerialNumber.HasValue == true)) {
                command.Parameters[9].Value = ((int)(SerialNumber.Value));
            }
            else {
                command.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Result.HasValue == true)) {
                command.Parameters[10].Value = ((int)(Result.Value));
            }
            else {
                command.Parameters[10].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((command.Parameters[9].Value == null) 
                        || (command.Parameters[9].Value.GetType() == typeof(global::System.DBNull)))) {
                SerialNumber = new global::System.Nullable<int>();
            }
            else {
                SerialNumber = new global::System.Nullable<int>(((int)(command.Parameters[9].Value)));
            }
            if (((command.Parameters[10].Value == null) 
                        || (command.Parameters[10].Value.GetType() == typeof(global::System.DBNull)))) {
                Result = new global::System.Nullable<int>();
            }
            else {
                Result = new global::System.Nullable<int>(((int)(command.Parameters[10].Value)));
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Nullable<int> ValidatePOPartQty(global::System.Nullable<int> PONumber, string PartNumber, global::System.Nullable<decimal> Quantity, global::System.Nullable<int> Objects, ref global::System.Nullable<decimal> NextDueAmount, ref global::System.Nullable<global::System.DateTime> NextDueDate, ref global::System.Nullable<int> Result) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[5];
            if ((PONumber.HasValue == true)) {
                command.Parameters[1].Value = ((int)(PONumber.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((PartNumber == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(PartNumber));
            }
            if ((Quantity.HasValue == true)) {
                command.Parameters[3].Value = ((decimal)(Quantity.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Objects.HasValue == true)) {
                command.Parameters[4].Value = ((int)(Objects.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((NextDueAmount.HasValue == true)) {
                command.Parameters[5].Value = ((decimal)(NextDueAmount.Value));
            }
            else {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((NextDueDate.HasValue == true)) {
                command.Parameters[6].Value = ((System.DateTime)(NextDueDate.Value));
            }
            else {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Result.HasValue == true)) {
                command.Parameters[7].Value = ((int)(Result.Value));
            }
            else {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((command.Parameters[5].Value == null) 
                        || (command.Parameters[5].Value.GetType() == typeof(global::System.DBNull)))) {
                NextDueAmount = new global::System.Nullable<decimal>();
            }
            else {
                NextDueAmount = new global::System.Nullable<decimal>(((decimal)(command.Parameters[5].Value)));
            }
            if (((command.Parameters[6].Value == null) 
                        || (command.Parameters[6].Value.GetType() == typeof(global::System.DBNull)))) {
                NextDueDate = new global::System.Nullable<global::System.DateTime>();
            }
            else {
                NextDueDate = new global::System.Nullable<global::System.DateTime>(((global::System.DateTime)(command.Parameters[6].Value)));
            }
            if (((command.Parameters[7].Value == null) 
                        || (command.Parameters[7].Value.GetType() == typeof(global::System.DBNull)))) {
                Result = new global::System.Nullable<int>();
            }
            else {
                Result = new global::System.Nullable<int>(((int)(command.Parameters[7].Value)));
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return new global::System.Nullable<int>();
            }
            else {
                return new global::System.Nullable<int>(((int)(returnValue)));
            }
        }
    }
}
namespace dsReceivingDockUtil {
    using System;
    using System.Data;
    
    
    public partial class DesignerUtil {
        
        public static bool IsDesignTime() {
            // Determine if this instance is running against .NET Framework by using the MSCoreLib PublicKeyToken
            System.Reflection.Assembly mscorlibAssembly = typeof(int).Assembly;
            if ((mscorlibAssembly != null)) {
                if (mscorlibAssembly.FullName.ToUpper().EndsWith("B77A5C561934E089")) {
                    return true;
                }
            }
            return false;
        }
        
        public static bool IsRunTime() {
            // Determine if this instance is running against .NET Compact Framework by using the MSCoreLib PublicKeyToken
            System.Reflection.Assembly mscorlibAssembly = typeof(int).Assembly;
            if ((mscorlibAssembly != null)) {
                if (mscorlibAssembly.FullName.ToUpper().EndsWith("969DB8053D3322AC")) {
                    return true;
                }
            }
            return false;
        }
    }
}
