//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebPortal.NewSalesAward.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EntityNotesEntities : DbContext
    {
        public EntityNotesEntities()
            : base("name=EntityNotesEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int usp_AddEntityNote(string userCode, string entityURI, string subjectLine, string body, string referencedURI, string categoryName, Nullable<int> importanceFlag, Nullable<int> privacyFlag, Nullable<int> parentNote, ObjectParameter newNoteID, ObjectParameter newNoteGUID, ObjectParameter tranDT, ObjectParameter result, Nullable<int> debug, ObjectParameter debugMsg)
        {
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            var entityURIParameter = entityURI != null ?
                new ObjectParameter("EntityURI", entityURI) :
                new ObjectParameter("EntityURI", typeof(string));
    
            var subjectLineParameter = subjectLine != null ?
                new ObjectParameter("SubjectLine", subjectLine) :
                new ObjectParameter("SubjectLine", typeof(string));
    
            var bodyParameter = body != null ?
                new ObjectParameter("Body", body) :
                new ObjectParameter("Body", typeof(string));
    
            var referencedURIParameter = referencedURI != null ?
                new ObjectParameter("ReferencedURI", referencedURI) :
                new ObjectParameter("ReferencedURI", typeof(string));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var importanceFlagParameter = importanceFlag.HasValue ?
                new ObjectParameter("ImportanceFlag", importanceFlag) :
                new ObjectParameter("ImportanceFlag", typeof(int));
    
            var privacyFlagParameter = privacyFlag.HasValue ?
                new ObjectParameter("PrivacyFlag", privacyFlag) :
                new ObjectParameter("PrivacyFlag", typeof(int));
    
            var parentNoteParameter = parentNote.HasValue ?
                new ObjectParameter("ParentNote", parentNote) :
                new ObjectParameter("ParentNote", typeof(int));
    
            var debugParameter = debug.HasValue ?
                new ObjectParameter("Debug", debug) :
                new ObjectParameter("Debug", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AddEntityNote", userCodeParameter, entityURIParameter, subjectLineParameter, bodyParameter, referencedURIParameter, categoryNameParameter, importanceFlagParameter, privacyFlagParameter, parentNoteParameter, newNoteID, newNoteGUID, tranDT, result, debugParameter, debugMsg);
        }
    
        public virtual ObjectResult<usp_GetEntityNotes_Result> usp_GetEntityNotes(string userCode, string entityURI, ObjectParameter tranDT, ObjectParameter result, Nullable<int> debug, ObjectParameter debugMsg)
        {
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            var entityURIParameter = entityURI != null ?
                new ObjectParameter("EntityURI", entityURI) :
                new ObjectParameter("EntityURI", typeof(string));
    
            var debugParameter = debug.HasValue ?
                new ObjectParameter("Debug", debug) :
                new ObjectParameter("Debug", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetEntityNotes_Result>("usp_GetEntityNotes", userCodeParameter, entityURIParameter, tranDT, result, debugParameter, debugMsg);
        }
    
        public virtual int usp_ModifyEntityNote(string userCode, string entityURI, Nullable<int> noteID, string subjectLine, string body, string referencedURI, string categoryName, Nullable<int> importanceFlag, Nullable<int> privacyFlag, ObjectParameter tranDT, ObjectParameter result, Nullable<int> debug, ObjectParameter debugMsg)
        {
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            var entityURIParameter = entityURI != null ?
                new ObjectParameter("EntityURI", entityURI) :
                new ObjectParameter("EntityURI", typeof(string));
    
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            var subjectLineParameter = subjectLine != null ?
                new ObjectParameter("SubjectLine", subjectLine) :
                new ObjectParameter("SubjectLine", typeof(string));
    
            var bodyParameter = body != null ?
                new ObjectParameter("Body", body) :
                new ObjectParameter("Body", typeof(string));
    
            var referencedURIParameter = referencedURI != null ?
                new ObjectParameter("ReferencedURI", referencedURI) :
                new ObjectParameter("ReferencedURI", typeof(string));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var importanceFlagParameter = importanceFlag.HasValue ?
                new ObjectParameter("ImportanceFlag", importanceFlag) :
                new ObjectParameter("ImportanceFlag", typeof(int));
    
            var privacyFlagParameter = privacyFlag.HasValue ?
                new ObjectParameter("PrivacyFlag", privacyFlag) :
                new ObjectParameter("PrivacyFlag", typeof(int));
    
            var debugParameter = debug.HasValue ?
                new ObjectParameter("Debug", debug) :
                new ObjectParameter("Debug", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ModifyEntityNote", userCodeParameter, entityURIParameter, noteIDParameter, subjectLineParameter, bodyParameter, referencedURIParameter, categoryNameParameter, importanceFlagParameter, privacyFlagParameter, tranDT, result, debugParameter, debugMsg);
        }
    }
}
