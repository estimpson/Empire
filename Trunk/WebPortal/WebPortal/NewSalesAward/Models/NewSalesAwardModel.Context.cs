//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebPortal.NewSalesAward.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FxPLMEntities : DbContext
    {
        public FxPLMEntities()
            : base("name=FxPLMEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<QuoteLog> QuoteLogs { get; set; }
        public virtual DbSet<Salespeople> Salespeoples { get; set; }
        public virtual DbSet<CustomerCommitmentForm> CustomerCommitmentForms { get; set; }
        public virtual DbSet<ProgramManager> ProgramManagers { get; set; }
        public virtual DbSet<QuoteReason> QuoteReasons { get; set; }
        public virtual DbSet<ActiveBasePart> ActiveBaseParts { get; set; }
    
        public virtual int usp_CreateAwardedQuote(string user, string quoteNumber, Nullable<System.DateTime> awardDate, string formOfCommitment, Nullable<byte> awardType, string replacingBasePart, string salesperson, string programManager, string comments, ObjectParameter tranDT, ObjectParameter result, Nullable<int> debug, ObjectParameter debugMsg)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var quoteNumberParameter = quoteNumber != null ?
                new ObjectParameter("QuoteNumber", quoteNumber) :
                new ObjectParameter("QuoteNumber", typeof(string));
    
            var awardDateParameter = awardDate.HasValue ?
                new ObjectParameter("AwardDate", awardDate) :
                new ObjectParameter("AwardDate", typeof(System.DateTime));
    
            var formOfCommitmentParameter = formOfCommitment != null ?
                new ObjectParameter("FormOfCommitment", formOfCommitment) :
                new ObjectParameter("FormOfCommitment", typeof(string));
    
            var awardTypeParameter = awardType.HasValue ?
                new ObjectParameter("AwardType", awardType) :
                new ObjectParameter("AwardType", typeof(byte));
    
            var replacingBasePartParameter = replacingBasePart != null ?
                new ObjectParameter("ReplacingBasePart", replacingBasePart) :
                new ObjectParameter("ReplacingBasePart", typeof(string));
    
            var salespersonParameter = salesperson != null ?
                new ObjectParameter("Salesperson", salesperson) :
                new ObjectParameter("Salesperson", typeof(string));
    
            var programManagerParameter = programManager != null ?
                new ObjectParameter("ProgramManager", programManager) :
                new ObjectParameter("ProgramManager", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var debugParameter = debug.HasValue ?
                new ObjectParameter("Debug", debug) :
                new ObjectParameter("Debug", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateAwardedQuote", userParameter, quoteNumberParameter, awardDateParameter, formOfCommitmentParameter, awardTypeParameter, replacingBasePartParameter, salespersonParameter, programManagerParameter, commentsParameter, tranDT, result, debugParameter, debugMsg);
        }
    
        public virtual int usp_SetBasePartAttributes(string user, string quoteNumber, string basePartFamilyList, string productLine, string empireMarketSegment, string empireMarketSubsegment, string empireApplication, Nullable<System.DateTime> empireSOP, Nullable<System.DateTime> empireEOP, string empireEOPNote, string comments, ObjectParameter tranDT, ObjectParameter result, Nullable<int> debug, ObjectParameter debugMsg)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var quoteNumberParameter = quoteNumber != null ?
                new ObjectParameter("QuoteNumber", quoteNumber) :
                new ObjectParameter("QuoteNumber", typeof(string));
    
            var basePartFamilyListParameter = basePartFamilyList != null ?
                new ObjectParameter("BasePartFamilyList", basePartFamilyList) :
                new ObjectParameter("BasePartFamilyList", typeof(string));
    
            var productLineParameter = productLine != null ?
                new ObjectParameter("ProductLine", productLine) :
                new ObjectParameter("ProductLine", typeof(string));
    
            var empireMarketSegmentParameter = empireMarketSegment != null ?
                new ObjectParameter("EmpireMarketSegment", empireMarketSegment) :
                new ObjectParameter("EmpireMarketSegment", typeof(string));
    
            var empireMarketSubsegmentParameter = empireMarketSubsegment != null ?
                new ObjectParameter("EmpireMarketSubsegment", empireMarketSubsegment) :
                new ObjectParameter("EmpireMarketSubsegment", typeof(string));
    
            var empireApplicationParameter = empireApplication != null ?
                new ObjectParameter("EmpireApplication", empireApplication) :
                new ObjectParameter("EmpireApplication", typeof(string));
    
            var empireSOPParameter = empireSOP.HasValue ?
                new ObjectParameter("EmpireSOP", empireSOP) :
                new ObjectParameter("EmpireSOP", typeof(System.DateTime));
    
            var empireEOPParameter = empireEOP.HasValue ?
                new ObjectParameter("EmpireEOP", empireEOP) :
                new ObjectParameter("EmpireEOP", typeof(System.DateTime));
    
            var empireEOPNoteParameter = empireEOPNote != null ?
                new ObjectParameter("EmpireEOPNote", empireEOPNote) :
                new ObjectParameter("EmpireEOPNote", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var debugParameter = debug.HasValue ?
                new ObjectParameter("Debug", debug) :
                new ObjectParameter("Debug", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SetBasePartAttributes", userParameter, quoteNumberParameter, basePartFamilyListParameter, productLineParameter, empireMarketSegmentParameter, empireMarketSubsegmentParameter, empireApplicationParameter, empireSOPParameter, empireEOPParameter, empireEOPNoteParameter, commentsParameter, tranDT, result, debugParameter, debugMsg);
        }
    
        public virtual ObjectResult<usp_LookupProgramManagerByInit_Result> usp_LookupProgramManagerByInit(string initials, ObjectParameter tranDT, ObjectParameter result)
        {
            var initialsParameter = initials != null ?
                new ObjectParameter("Initials", initials) :
                new ObjectParameter("Initials", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LookupProgramManagerByInit_Result>("usp_LookupProgramManagerByInit", initialsParameter, tranDT, result);
        }
    
        public virtual ObjectResult<usp_LookupSalespersonByInit_Result> usp_LookupSalespersonByInit(string initials, ObjectParameter tranDT, ObjectParameter result)
        {
            var initialsParameter = initials != null ?
                new ObjectParameter("Initials", initials) :
                new ObjectParameter("Initials", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LookupSalespersonByInit_Result>("usp_LookupSalespersonByInit", initialsParameter, tranDT, result);
        }
    
        public virtual int usp_SignOffBasePartAttributes(string user, string quoteNumber, ObjectParameter tranDT, ObjectParameter result, Nullable<int> debug, ObjectParameter debugMsg)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var quoteNumberParameter = quoteNumber != null ?
                new ObjectParameter("QuoteNumber", quoteNumber) :
                new ObjectParameter("QuoteNumber", typeof(string));
    
            var debugParameter = debug.HasValue ?
                new ObjectParameter("Debug", debug) :
                new ObjectParameter("Debug", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SignOffBasePartAttributes", userParameter, quoteNumberParameter, tranDT, result, debugParameter, debugMsg);
        }
    
        public virtual int usp_GetAwardedQuoteDetails(string quoteNumber, ObjectParameter awardDate, ObjectParameter formOfCommitment, ObjectParameter awardType, ObjectParameter replacingBasePart, ObjectParameter salesperson, ObjectParameter programManager, ObjectParameter comments, ObjectParameter tranDT, ObjectParameter result, Nullable<int> debug, ObjectParameter debugMsg)
        {
            var quoteNumberParameter = quoteNumber != null ?
                new ObjectParameter("QuoteNumber", quoteNumber) :
                new ObjectParameter("QuoteNumber", typeof(string));
    
            var debugParameter = debug.HasValue ?
                new ObjectParameter("Debug", debug) :
                new ObjectParameter("Debug", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetAwardedQuoteDetails", quoteNumberParameter, awardDate, formOfCommitment, awardType, replacingBasePart, salesperson, programManager, comments, tranDT, result, debugParameter, debugMsg);
        }
    }
}
