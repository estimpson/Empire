//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebPortal.SalesForecast.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MONITOREntities1 : DbContext
    {
        public MONITOREntities1()
            : base("name=MONITOREntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<GetEopYears_Result> usp_Web_SalesForecastUpdated_GetEopYears()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEopYears_Result>("usp_Web_SalesForecastUpdated_GetEopYears");
        }
    
        public virtual int usp_Web_SalesForecastUpdated_UpdateBasePartCloseouts(string userCode, string basePart, string verifiedEop, Nullable<System.DateTime> verifiedEopDate, string schedulerResponsible, string rfMpsLink, string schedulingTeamComments, string materialsComments, string shipToLocation, Nullable<decimal> fgInventoryAfterBuildout, Nullable<decimal> costEach, Nullable<decimal> excessFgAfterBuildout, Nullable<decimal> excessRmAfterBuildout, Nullable<decimal> programExposure, Nullable<System.DateTime> dateToSendCoLetter, ObjectParameter tranDT, ObjectParameter result)
        {
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            var basePartParameter = basePart != null ?
                new ObjectParameter("BasePart", basePart) :
                new ObjectParameter("BasePart", typeof(string));
    
            var verifiedEopParameter = verifiedEop != null ?
                new ObjectParameter("VerifiedEop", verifiedEop) :
                new ObjectParameter("VerifiedEop", typeof(string));
    
            var verifiedEopDateParameter = verifiedEopDate.HasValue ?
                new ObjectParameter("VerifiedEopDate", verifiedEopDate) :
                new ObjectParameter("VerifiedEopDate", typeof(System.DateTime));
    
            var schedulerResponsibleParameter = schedulerResponsible != null ?
                new ObjectParameter("SchedulerResponsible", schedulerResponsible) :
                new ObjectParameter("SchedulerResponsible", typeof(string));
    
            var rfMpsLinkParameter = rfMpsLink != null ?
                new ObjectParameter("RfMpsLink", rfMpsLink) :
                new ObjectParameter("RfMpsLink", typeof(string));
    
            var schedulingTeamCommentsParameter = schedulingTeamComments != null ?
                new ObjectParameter("SchedulingTeamComments", schedulingTeamComments) :
                new ObjectParameter("SchedulingTeamComments", typeof(string));
    
            var materialsCommentsParameter = materialsComments != null ?
                new ObjectParameter("MaterialsComments", materialsComments) :
                new ObjectParameter("MaterialsComments", typeof(string));
    
            var shipToLocationParameter = shipToLocation != null ?
                new ObjectParameter("ShipToLocation", shipToLocation) :
                new ObjectParameter("ShipToLocation", typeof(string));
    
            var fgInventoryAfterBuildoutParameter = fgInventoryAfterBuildout.HasValue ?
                new ObjectParameter("FgInventoryAfterBuildout", fgInventoryAfterBuildout) :
                new ObjectParameter("FgInventoryAfterBuildout", typeof(decimal));
    
            var costEachParameter = costEach.HasValue ?
                new ObjectParameter("CostEach", costEach) :
                new ObjectParameter("CostEach", typeof(decimal));
    
            var excessFgAfterBuildoutParameter = excessFgAfterBuildout.HasValue ?
                new ObjectParameter("ExcessFgAfterBuildout", excessFgAfterBuildout) :
                new ObjectParameter("ExcessFgAfterBuildout", typeof(decimal));
    
            var excessRmAfterBuildoutParameter = excessRmAfterBuildout.HasValue ?
                new ObjectParameter("ExcessRmAfterBuildout", excessRmAfterBuildout) :
                new ObjectParameter("ExcessRmAfterBuildout", typeof(decimal));
    
            var programExposureParameter = programExposure.HasValue ?
                new ObjectParameter("ProgramExposure", programExposure) :
                new ObjectParameter("ProgramExposure", typeof(decimal));
    
            var dateToSendCoLetterParameter = dateToSendCoLetter.HasValue ?
                new ObjectParameter("DateToSendCoLetter", dateToSendCoLetter) :
                new ObjectParameter("DateToSendCoLetter", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Web_SalesForecastUpdated_UpdateBasePartCloseouts", userCodeParameter, basePartParameter, verifiedEopParameter, verifiedEopDateParameter, schedulerResponsibleParameter, rfMpsLinkParameter, schedulingTeamCommentsParameter, materialsCommentsParameter, shipToLocationParameter, fgInventoryAfterBuildoutParameter, costEachParameter, excessFgAfterBuildoutParameter, excessRmAfterBuildoutParameter, programExposureParameter, dateToSendCoLetterParameter, tranDT, result);
        }
    
        public virtual ObjectResult<GetSchedulers_Result> usp_PlanningSnapshot_Q_GetSchedulers(ObjectParameter tranDT, ObjectParameter result, Nullable<int> debug, ObjectParameter debugMsg)
        {
            var debugParameter = debug.HasValue ?
                new ObjectParameter("Debug", debug) :
                new ObjectParameter("Debug", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchedulers_Result>("usp_PlanningSnapshot_Q_GetSchedulers", tranDT, result, debugParameter, debugMsg);
        }
    
        public virtual ObjectResult<GetSalesForecastUpdated_Result> usp_Web_SalesForecastUpdated_GetSalesForecastUpdated(Nullable<int> eopYear, Nullable<int> filter)
        {
            var eopYearParameter = eopYear.HasValue ?
                new ObjectParameter("EopYear", eopYear) :
                new ObjectParameter("EopYear", typeof(int));
    
            var filterParameter = filter.HasValue ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSalesForecastUpdated_Result>("usp_Web_SalesForecastUpdated_GetSalesForecastUpdated", eopYearParameter, filterParameter);
        }
    }
}
